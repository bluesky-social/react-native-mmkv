///
/// HybridMMKVPlatformContextSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridMMKVPlatformContextSpec.hpp"

// Forward declaration of `HybridMMKVPlatformContextSpec_cxx` to properly resolve imports.
namespace NitroMmkv { class HybridMMKVPlatformContextSpec_cxx; }



#include <string>

#include "NitroMmkv-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::mmkv {

  /**
   * The C++ part of HybridMMKVPlatformContextSpec_cxx.swift.
   *
   * HybridMMKVPlatformContextSpecSwift (C++) accesses HybridMMKVPlatformContextSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridMMKVPlatformContextSpec_cxx can directly inherit from the C++ class HybridMMKVPlatformContextSpec
   * to simplify the whole structure and memory management.
   */
  class HybridMMKVPlatformContextSpecSwift: public virtual HybridMMKVPlatformContextSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridMMKVPlatformContextSpecSwift(const NitroMmkv::HybridMMKVPlatformContextSpec_cxx& swiftPart):
      HybridObject(HybridMMKVPlatformContextSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroMmkv::HybridMMKVPlatformContextSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline std::string getBaseDirectory() noexcept override {
      auto __result = _swiftPart.getBaseDirectory();
      return __result;
    }
    inline std::string getAppGroupDirectory() noexcept override {
      auto __result = _swiftPart.getAppGroupDirectory();
      return __result;
    }

  public:
    // Methods
    

  private:
    NitroMmkv::HybridMMKVPlatformContextSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::mmkv
