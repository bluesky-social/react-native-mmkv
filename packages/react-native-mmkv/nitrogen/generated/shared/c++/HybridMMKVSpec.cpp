///
/// HybridMMKVSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridMMKVSpec.hpp"

namespace margelo::nitro::mmkv {

  void HybridMMKVSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("set", &HybridMMKVSpec::getSet);
      prototype.registerHybridSetter("set", &HybridMMKVSpec::setSet);
      prototype.registerHybridGetter("getBoolean", &HybridMMKVSpec::getGetBoolean);
      prototype.registerHybridSetter("getBoolean", &HybridMMKVSpec::setGetBoolean);
      prototype.registerHybridGetter("getString", &HybridMMKVSpec::getGetString);
      prototype.registerHybridSetter("getString", &HybridMMKVSpec::setGetString);
      prototype.registerHybridGetter("getNumber", &HybridMMKVSpec::getGetNumber);
      prototype.registerHybridSetter("getNumber", &HybridMMKVSpec::setGetNumber);
      prototype.registerHybridGetter("getBuffer", &HybridMMKVSpec::getGetBuffer);
      prototype.registerHybridSetter("getBuffer", &HybridMMKVSpec::setGetBuffer);
      prototype.registerHybridGetter("contains", &HybridMMKVSpec::getContains);
      prototype.registerHybridSetter("contains", &HybridMMKVSpec::setContains);
      prototype.registerHybridGetter("delete", &HybridMMKVSpec::getDelete);
      prototype.registerHybridSetter("delete", &HybridMMKVSpec::setDelete);
      prototype.registerHybridGetter("getAllKeys", &HybridMMKVSpec::getGetAllKeys);
      prototype.registerHybridSetter("getAllKeys", &HybridMMKVSpec::setGetAllKeys);
      prototype.registerHybridGetter("clearAll", &HybridMMKVSpec::getClearAll);
      prototype.registerHybridSetter("clearAll", &HybridMMKVSpec::setClearAll);
      prototype.registerHybridGetter("recrypt", &HybridMMKVSpec::getRecrypt);
      prototype.registerHybridSetter("recrypt", &HybridMMKVSpec::setRecrypt);
      prototype.registerHybridGetter("size", &HybridMMKVSpec::getSize);
      prototype.registerHybridGetter("isReadOnly", &HybridMMKVSpec::getIsReadOnly);
      prototype.registerHybridMethod("trim", &HybridMMKVSpec::trim);
    });
  }

} // namespace margelo::nitro::mmkv
